#
# Copyright (c) 2011-2015 LAAS/CNRS
# All rights reserved.
#
# Permission to use, copy, modify, and distribute this software for any purpose
# with or without   fee is hereby granted, provided   that the above  copyright
# notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS  SOFTWARE INCLUDING ALL  IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR  BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR  ANY DAMAGES WHATSOEVER RESULTING  FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION,   ARISING OUT OF OR IN    CONNECTION WITH THE USE   OR
# PERFORMANCE OF THIS SOFTWARE.
#
#

# ros component generation.

template usage {*}{
    "\n"
    "ROS-based component generation.\n"
    "\n"
    "This template generates a GenoM component that uses the ROS\n"
    "middleware.\n"
    "\n"
    "Supported options:\n"
    "  -C, --directory=dir\toutput files in dir\n"
    "  -p, --preserve\tdo not overwrite existing files\n"
    "  -s. --slow\t\tspecify the slow down factor\n"
    "  -h. --help\t\tprint usage summary (this text)"
}

# defaults
set slowdown 1
set multi 0
set odir bip-ros
engine mode +overwrite +move-if-change

# require utility procs
template require ../common-pocolibs/typeutil.tcl

# parse options
template options {
    -C - --directory	{ set odir [template arg] }
    -p - --preserve	{ engine mode -overwrite }
    -s - --slow         { set slowdown [template arg] }
    -h - --help		{ puts [template usage]; exit 0 }
}
if {![llength $argv]} { puts [template usage]; exit 2 }

engine chdir $odir

# add common services to dotgen specification
dotgen parse file [file join [dotgen template builtindir] common/genom.gen]

# parse input
set input [list]
foreach f $argv {
  dotgen parse file $f
  lappend input [file normalize $f]
}

# component compositing not (yet?) supported
set comp [dotgen components]
if {[llength $comp] > 1} {
    set multi 1
}


# common header for all files (copyright info from .gen file)
set header {/* <"[--- Generated by [dotgen genom version]. Do not edit - ]"> */

<'if {![catch {dotgen input notice} notice]} {
  puts [lang c; comment $notice]
}'>
}

# generate source files one for all component
set server_files {
  BIPEgenom3_external_for_bip.h
  BIPEinternals.h
  BIPEactivities.h
  BIPEcontrol-task.cc
  BIPEmain.cc
}

# generate source files one for each component
set server_comp_files {
  exception.cc
  main.cc
  control-task.cc
  control-codels.cc
  activities.cc
  remote.cc
  port.cc
  json.cc
  internals.h
  activities.h
  locals.h
  remote.h
  port.h
  genom3_external_for_bip.h
}

set bip_files {
  BIPGenoM3.bip
}
set bip_external_files {
  BIPGenoM3.cpp
  BIPGenoM3.hpp
}

foreach f $server_files {
  template parse string $header \
      file $f file src/[file tail $f]
}


foreach c [dotgen components] {
    foreach f $server_comp_files {
	template parse args $c string $header \
	    file $f file src/[$c name]_[file tail $f]
    }
    foreach t [$c tasks] {
	template parse args [list $c $t] string $header \
	    file exec-task.cc file src/[$c name]_[$t name]-task.cc
    }
    foreach f $bip_external_files {
	template parse args $c string $header \
	    file $f file src/bip/external/[$c name]_[file tail $f]
    }
}

foreach f $bip_files {
  template parse args $slowdown string $header \
      file $f file src/bip/BIPE[file tail $f]
}

template parse string $header \
        file "BIPmain.cpp" file src/bip/external/BIPmain.cpp

# generate C mappings for the server
foreach comp [dotgen components] {
    template parse args $comp string $header file codels.mappings.h \
	file src/[$comp name]_c_types.h
}

# generate ros .msg/.srv and .action for interface types
template require ../common-ros/genrosmsg.tcl
set msg ""

foreach comp [dotgen components] {
set rosmsg_done [dict create]
set msg_types [genrossrv $comp true]
set msg_types [genrosmsg $comp $msg_types]

# public exception list + remote
set exl [dict create]
foreach t [$comp throws] {
  foreach e [$t types] {
    dict set exl [$e mangle] $e
  }
}
foreach r [$comp remotes] {
  foreach t [$r throws] {
    foreach e [$t types] {
      dict set exl [$e mangle] $e
    }
  }
}
set exl [dict values $exl]

# generate type manipulation for all private types
template parse args [list $comp [$comp types private]]	\
    string $header file ../common-ros/typecopy.h	\
    file src/[$comp name]_typecopy.h
template parse args [list $exl] \
    file [file join [dotgen template builtindir] common/json-types.h] \
    file src/[$comp name]_json-types.h

# generate serialization for all public types
template parse args [list $comp [$comp types extern]] \
    string $header file ../common-ros/serialize.h file src/[$comp name]_serialize.h
template parse args $comp file ../common-ros/portlib.h file src/[$comp name]_portlib.h
template parse args [list $comp [concat [$comp services] [$comp remotes]]] \
    file ../common-ros/service.h file src/[$comp name]_service.h
template parse args [list $comp [concat [$comp services] [$comp remotes]]] \
    file ../common-ros/action.h file src/[$comp name]_action.h

foreach t $msg_types {
    if {[catch {$t masquerade ros}]} {
	set msg "$msg\nmd5_files+=	[$comp name]/msg/[rosmsg_cname $t].msg.md5"
    }
}
}

#puts stderr $msg

template parse file ../common-ros/genom-serialize.h file src/genom-serialize.h

# setup build environment
template parse args [list $msg $input] \
    file ros.Makefile.am file Makefile.am
template parse args [list $msg_types] file ros.configure.ac file configure.ac
template parse file ../common-ros/autoconf/ax_pthread.m4 file autoconf/ax_pthread.m4
template parse file ../common-ros/autoconf/ax_boost_base.m4 \
    file autoconf/ax_boost_base.m4
template parse file ../common-ros/autoconf/ax_boost_thread.m4 \
    file autoconf/ax_boost_thread.m4

foreach comp [dotgen components] {
template parse args [list $comp $msg_types] \
    file ../common-ros/ros.manifest.xml file [$comp name]/manifest.xml
}

set deps [list]
foreach d [concat [dotgen input deps] [template deps]] {
  lappend deps "depend/input.d: $d"
  lappend deps "$d:"
}
engine mode +overwrite -move-if-change
template parse raw [join $deps "\n"]\n file depend/input.d
