<'
#
# Copyright (c) 2012-2015,2017 LAAS/CNRS
# All rights reserved.
#
# Permission to use, copy, modify, and distribute this software for any purpose
# with or without   fee is hereby granted, provided   that the above  copyright
# notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS  SOFTWARE INCLUDING ALL  IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR  BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR  ANY DAMAGES WHATSOEVER RESULTING  FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION,   ARISING OUT OF OR IN    CONNECTION WITH THE USE   OR
# PERFORMANCE OF THIS SOFTWARE.
#
#                                            Anthony Mallet on Tue Jan  3 2012
#

# check arguments
if {[llength $argv] != 2} { error "expected arguments: input" }
lassign $argv msg input

# compute handy shortcuts
# set component [dotgen component]
# set comp [$component name]
'>

ACLOCAL_AMFLAGS=	-I autoconf

# --- ros configuration variables ------------------------------------------

# Store rospack cache locally, since it is architecture dependant
export ROS_HOME
override ROS_HOME:=${top_builddir}/ros-cache

# ROS_ROOT is normally obsolete, but still required for gendeps
export ROS_ROOT
override ROS_ROOT:=${std_msgs_prefix}/share/ros

# ROS_PACKAGE_PATH points to the ros hierarchy inside generated sources
export ROS_PACKAGE_PATH
override ROS_PACKAGE_PATH:=<'foreach c [dotgen components] {set comp [$c name]'>${abs_top_srcdir}/<"$comp">:<'}'>${ROS_PACKAGE_PATH}

# --- component ------------------------------------------------------------

lib_LTLIBRARIES=<'foreach c [dotgen components] {set comp [$c name]'> lib<"$comp">-bip-ros.la<'}'> libbip-main-ros.la


libbip_main_ros_la_SOURCES=\
	src/BIPEmain.cc		\
	src/BIPEcontrol-task.cc		\
	src/BIPEinternals.h

libbip_main_ros_la_CFLAGS=\
	${PTHREAD_CFLAGS}
libbip_main_ros_la_CXXFLAGS=\
	${PTHREAD_CFLAGS}

libbip_main_ros_la_CPPFLAGS=\
	${<"$comp">_CFLAGS}			\
	${genom3_CFLAGS}			\
	${ROS_CFLAGS}				\
	${BOOST_CPPFLAGS}

libbip_main_ros_la_LDFLAGS=\
	${BOOST_LDFLAGS} $(patsubst -L%,-R%,${BOOST_LDFLAGS})

libbip_main_ros_la_LIBADD=\
	${<"$comp">_LIBS}			\
	${genom3_LIBS}				\
	${ROS_LIBS}				\
	${PTHREAD_LIBS}				\
	${BOOST_THREAD_LIB}			\
	$(codels_LIBS) 

<'foreach component [dotgen components] {set comp [$component name]'> 
lib<"$comp">_bip_ros_la_SOURCES=\
	src/<"$comp">_c_types.h			\
	src/<"$comp">_typecopy.h		\
	src/<"$comp">_serialize.h		\
	src/<"$comp">_port.h			\
	src/<"$comp">_remote.h			\
	src/<"$comp">_service.h			\
	src/<"$comp">_action.h			\
	src/<"$comp">_internals.h		\
						\
	src/<"$comp">_main.cc			\
	src/<"$comp">_activities.cc		\
	src/<"$comp">_control-task.cc		\
	src/<"$comp">_control-codels.cc		\
<'foreach t [$component tasks] {'>
	src/<"$comp">_<"[$t name]">-task.cc	\
<'}'>
	src/<"$comp">_remote.cc			\
	src/<"$comp">_port.cc			\
	src/<"$comp">_json.cc			\
	src/<"$comp">_exception.cc

lib<"$comp">_bip_ros_la_CFLAGS=\
	${PTHREAD_CFLAGS}
lib<"$comp">_bip_ros_la_CXXFLAGS=\
	${PTHREAD_CFLAGS}

lib<"$comp">_bip_ros_la_CPPFLAGS=\
	${<"$comp">_CFLAGS}			\
	${genom3_CFLAGS}			\
	${ROS_CFLAGS}				\
	${BOOST_CPPFLAGS}

lib<"$comp">_bip_ros_la_LDFLAGS=\
	${BOOST_LDFLAGS} $(patsubst -L%,-R%,${BOOST_LDFLAGS})

lib<"$comp">_bip_ros_la_LIBADD=\
	${<"$comp">_LIBS}			\
	${genom3_LIBS}				\
	${ROS_LIBS}				\
	${PTHREAD_LIBS}				\
	${BOOST_THREAD_LIB}			\
	$(codels_LIBS) 
 <'}'>

# This could be much smarter, but will do for now.
all-local: src/bip/out/system

src/bip/out/system: <'foreach c [dotgen components] {set comp [$c name]'> lib<"$comp">-bip-ros.la \
			src/bip/external/<"$comp">_BIPGenoM3.cpp \
			src/bip/external/<"$comp">_BIPGenoM3.hpp \
 <'}'>
			libbip-main-ros.la \
			src/bip/out/CMakeLists.txt \
			src/bip/external/BIPmain.cpp
	make src/bip/out/Makefile
	(cd src/bip/out ;\
	make)

src/bip/out/CMakeLists.txt: src/bip/BIPEBIPGenoM3.bip
	(cd src/bip ; \
	mkdir -p out ;\
	bipc.sh -p BIPEBIPGenoM3 -d "Compound_BIPE()" --gencpp-no-main --gencpp-cc-extra-src external/BIPmain.cpp --gencpp-cc-I .. --gencpp-cc-I . --gencpp-output-dir out --gencpp-ld-L ${HOME}/work/lib --gencpp-ld-L ../../.libs <'foreach c [dotgen components] {
set comp [$c name]'> --gencpp-ld-l <"$comp">-bip-ros<'}'> --gencpp-ld-l bip-main-ros --gencpp-ld-l rt --gencpp-cc-I external --gencpp-ld-l pthread)

src/bip/out/Makefile: src/bip/out/CMakeLists.txt 
	(cd src/bip/out ;\
	cmake -DCMAKE_BUILD_TYPE=Release CMakeLists.txt)


# --- regen ----------------------------------------------------------------

.PHONY: regen
depend/input.d regen: <"$input">
	${genom3} <"[dotgen genom cmdline]">		\
	  <"[dotgen template dir]"> -C . $<

$(eval include depend/input.d)



# --- generated files ------------------------------------------------------

md5_files=
msg_files=

<"$msg">

<'foreach component [dotgen components] {'>
<'set comp [$component name]'>

<'
set actions_prefix {
  Action ActionFeedback ActionGoal ActionResult Feedback Goal Result
}
'>
<'foreach s [concat [$component services] [$component remotes]] {'>
<'  if {[$s kind] != "activity"} {'>
md5_files+=	<"$comp">/srv/<"[$s name]">.srv.md5
<'  } else {'>
<'    foreach p $actions_prefix {'>
msg_files+=	<"$comp">/msg/<"[$s name]"><"$p">.msg
md5_files+=	<"$comp">/msg/<"[$s name]"><"$p">.msg.md5
<'    }'>
<'  }'>
<'}'>
<'}'>

BUILT_SOURCES=	${msg_files} ${md5_files}

<'foreach c [dotgen components] {set comp [$c name]'>

<'foreach p $actions_prefix {'><"$comp">/msg/%<"$p">.msg <'}'>: \
  <"$comp">/action/%.action
	${GENACTION} -o <"$comp">/msg $<

<'}'>

%.md5.d %.md5: %
	${MSGMD5}						\
	  -f '#define genom_md5_$(basename $(notdir $*)) "%s"'	\
	  -M -o '${@:.d=}' $<

$(eval -include ${md5_files:=.d})


# --- cleaning -------------------------------------------------------------

CLEANFILES=	${BUILT_SOURCES} ${md5_files:=.d}

clean-local:
	-rm -rf ${ROS_HOME}
	-rm -rf src/bip/out

